1. 进入到项目目录
KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD
2. CMD : vi ui

3. 进入项目或者创建项目


4.axios异步发送
安装axios 安装json-server cnpm install json-server -g

5.Vue配置全局变量     main.js


页面可以调用端口，Postman不行，代理问题，关闭代理或者修改代理配置



6. Cannot destructure property xxx of 'undefined'.

比如crypto没有定义；  首先需要在main.js   import crypto from 'crypto' 引入
然后在下方Vue.prototype.$crypto = crypto
代码中引用 this.$crypto


7.只需要在项目的根目录下新建 vue.config.js 文件（是根目录，不是src目录）
const path = require('path')

module.exports = {
    publicPath: './', // 基本路径
    outputDir: 'dist', // 输出文件目录
    lintOnSave: false, // eslint-loader 是否在保存的时候检查

    // webpack配置
    chainWebpack: (config) => {
    },
    configureWebpack: (config) => {
        if (process.env.NODE_ENV === 'production') {
            // 为生产环境修改配置...
            config.mode = 'production'
        } else {
            // 为开发环境修改配置...
            config.mode = 'development'
        }
        Object.assign(config, {
            // 开发生产共同配置
            resolve: {
                // 别名配置
                alias: {
                    '@': path.resolve(__dirname, './src'),
                    '@c': path.resolve(__dirname, './src/components'),
                    '@p': path.resolve(__dirname, './src/pages')
                }
            }
        })
    },
    productionSourceMap: false, // 生产环境是否生成 sourceMap 文件
    // css相关配置
    // css: {
    //     extract: true, // 是否使用css分离插件 ExtractTextPlugin
    //     sourceMap: false, // 开启 CSS source maps?
    //     loaderOptions: {
    //         css: {}, // 这里的选项会传递给 css-loader
    //         postcss: {} // 这里的选项会传递给 postcss-loader
    //     }, // css预设器配置项 详见https://cli.vuejs.org/zh/config/#css-loaderoptions
    //     modules: false // 启用 CSS modules for all css / pre-processor files.
    // },
    parallel: require('os').cpus().length > 1, // 是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。
    pwa: {}, // PWA 插件相关配置 see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa
    // webpack-dev-server 相关配置
    devServer: {
        open: process.platform === 'darwin',
        host: '0.0.0.0', // 允许外部ip访问
        port: 8088, // 端口
        https: false, // 是否启用https
        // 错误、警告在页面弹出
        overlay: {
            warnings: true,
            errors: true
        },
        // 代理转发配置，用于调试环境
        proxy: {
            '/api': {
                target: 'http://192.168.0.111:4000',   //目标地址
                changeOrigin: true, // 允许websockets跨域
                // ws: true,
                pathRewrite: {
                    '^/api': ''
                }
            }
        }
    },
    // 第三方插件配置
    pluginOptions: {}
}



8.解决跨域问题
8.1配置代理
        proxy: {
            '/api': {
                target: 'http://192.168.0.111:4000',   //目标地址
                changeOrigin: true, // 允许websockets跨域
                // ws: true,
                pathRewrite: {
                    '^/api': ''
                }
            }
        }

	



if (resp.data.errorCode == 0) {
                            //2.后端返回登录成功信息
                            _this.tableData = resp.data.loglist;
                            _this.tableData.length = resp.data.total;
if (resp.data.errorCode == 0) {
                            //2.后端返回登录成功信息
                            _this.tableData = resp.data.loglist;
                            _this.tableData.length = resp.data.total;
                            _this.ReDate();
--------------------------
ElementUI Table表格 可选 全选